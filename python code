import time
import numpy as np
import h5py
import matplotlib.pyplot as plt
import scipy
from PIL import Image
from scipy import ndimage

#%matplotlib inline
plt.rcParams['figure.figsize'] = (5.0, 4.0) # set default size of plots
plt.rcParams['image.interpolation'] = 'nearest'
plt.rcParams['image.cmap'] = 'gray'


np.random.seed(1)

def load_data():
	train_dataset = h5py.File('datasets/train_catvnoncat.h5', "r")
	train_set_x_orig = np.array(train_dataset["train_set_x"][:])  # training data features
	train_set_y_orig = np.array(train_dataset["train_set_y"][:])  # training data labels

	test_dataset = h5py.File('datasets/test_catvnoncat.h5', "r")
	test_set_x_orig = np.array(test_dataset["test_set_x"][:])  # test data features
	test_set_y_orig = np.array(test_dataset["test_set_y"][:])  # test data labels

	classes = np.array(test_dataset["list_classes"][:])	 # the list of classes

	train_set_y_orig = train_set_y_orig.reshape((1, train_set_y_orig.shape[0]))
	test_set_y_orig = test_set_y_orig.reshape((1, test_set_y_orig.shape[0]))

	return train_set_x_orig, train_set_y_orig, test_set_x_orig, test_set_y_orig, classes

""" Helper functions: forward and backward functions for Sigmoid and RELU. """

def sigmoid(Z):
	"""
	sigmoid function

	Arguments:
	Z -- numpy array of any shape

	Returns:
	A -- output of sigmoid(z), same shape as Z
	cache -- returns Z as well, useful during backpropagation
	"""

	A = 1 / (1 + np.exp(-Z))
	cache = Z

	return A, cache


def relu(Z):
	"""
	RELU function

	Arguments:
	Z -- Output of the linear layer, of any shape

	Returns:
	A -- Post-activation parameter, of the same shape as Z
	cache -- a python dictionary containing "A" ; stored for computing the backward pass efficiently
	"""

	A = np.maximum(0, Z)
	cache = Z
	
	return A, cache


def relu_backward(dA, cache):
	"""
	backward propagation for a single RELU unit

	Arguments:
	dA -- post-activation gradient, of any shape
	cache -- 'Z' where we store for computing backward propagation efficiently

	Returns:
	dZ -- Gradient of the cost with respect to Z
	"""
	Z = cache
	dZ = np.array(dA, copy=True)
	dZ[Z <= 0] = 0

	return dZ


def sigmoid_backward(dA, cache):
	"""
	backward propagation for a single SIGMOID unit

	Arguments:
	dA -- post-activation gradient, of any shape
	cache -- 'Z' where we store for computing backward propagation efficiently

	Returns:
	dZ -- Gradient of the cost with respect to Z
	"""

	Z = cache
	s = 1 / (1 + np.exp(-Z))
	dZ = dA * s * (1 - s)

	return dZ

def initialize_parameters(n_x, n_h, n_y):
	"""
	initialize parameters for a 2-layer neural network

	Argument:
	n_x -- size of the input layer
	n_h -- size of the hidden layer
	n_y -- size of the output layer

	Returns:
	parameters -- dictionary containing parameters "W1", "b1", "W2", "b2":
					W1 -- weight matrix of shape (n_h, n_x)
					b1 -- bias vector of shape (n_h, 1)
					W2 -- weight matrix of shape (n_y, n_h)
					b2 -- bias vector of shape (n_y, 1)
	"""

	W1 = np.random.randn(n_h, n_x) / 100
	b1 = np.zeros((n_h, 1))
	W2 = np.random.randn(n_y, n_h) / 100
	b2 = np.zeros((n_y, 1))

	parameters = {"W1": W1, "b1": b1, "W2": W2, "b2": b2}

	return parameters


def linear_activation_forward(A_prev, W, b, activation):
	"""
	forward propagation for activation layer

	Arguments:
	A_prev -- activations from previous layer (or input data): (size of previous layer, number of examples)
	W -- weights matrix: numpy array of shape (size of current layer, size of previous layer)
	b -- bias vector, numpy array of shape (size of the current layer, 1)
	activation -- the activation to be used in this layer, stored as a text string: "sigmoid" or "relu"

	Returns:
	A -- the output of the activation function, also called the post-activation value
	cache -- a python dictionary containing "linear_cache" and "activation_cache";
			 stored for computing the backward pass efficiently
	"""

	A = np.dot(W, A_prev) + b # linear transformation plus bias
	
	linear_cache = A_prev # cache the inputs to linear transformation
	A_copy = np.copy(A)
	
	if activation == "relu": # depending on keyword, pass values through activation and cache those values for later use

		A = relu(A)[0]
		activation_cache = relu(A_copy)[1]
		
	else:
		
		A = sigmoid(A)[0]
		activation_cache = sigmoid(A_copy)[1]
		
	cache = {"W": W, "linear_cache": linear_cache, "activation_cache": activation_cache} # cache dict including W at layer l

	return A, cache


def compute_cost(AL, Y):
	"""
	cost function. cross entropy is used as an example here.

	Arguments:
	AL -- probability vector corresponding to your label predictions, shape (1, number of examples)
	Y -- true "label" vector (for example: containing 0 if non-cat, 1 if cat), shape (1, number of examples)

	Returns:
	cost -- cross-entropy loss
	"""

	cost = np.sum(- Y * np.log(AL) - (1 - Y) * np.log(1 - AL)) / len(Y[0]) # compute binary cross entropy loss
	
	return cost


def linear_activation_backward(dA, cache, activation):
	"""
	backward propagation for the LINEAR->ACTIVATION layer.

	Arguments:
	dA -- post-activation gradient for current layer l
	cache -- tuple of values (linear_cache, activation_cache) we store for computing backward propagation efficiently
	activation -- the activation to be used in this layer, stored as a text string: "sigmoid" or "relu"

	Returns:
	dA_prev -- Gradient of the cost with respect to the activation (of the previous layer l-1), same shape as A_prev
	dW -- Gradient of the cost with respect to W (current layer l), same shape as W
	db -- Gradient of the cost with respect to b (current layer l), same shape as b
	"""
	
	linear_cache = cache["linear_cache"] # here we retrieve the caches including W and the # of neurons at layer l
	activation_cache = cache["activation_cache"]
	W = cache["W"]
	m = linear_cache.shape[1]
	
	if activation == "relu": # calculate gradient of loss with respect to activation based on keyword
	
		dact = relu_backward(dA, activation_cache)
	
	else:
		
		dact = sigmoid_backward(dA, activation_cache)
	
	dA_prev = np.dot(W.transpose(), dact) # calculate various loss gradients and also normalizing those that need it
	dW = (1 / m) * np.dot(dact, linear_cache.transpose())
	db = (1 / m) * np.dot(dact, np.ones(shape=(209,1)))

	return dA_prev, dW, db


def update_parameters(parameters, grads, learning_rate):
	"""
	update parameters using gradient descent

	Arguments:
	parameters -- python dictionary containing your parameters
	grads -- python dictionary containing your gradients, output of L_model_backward

	Returns:
	parameters -- python dictionary containing updated parameters
	"""
	
	W1 = parameters["W1"]
	b1 = parameters["b1"]
	W2 = parameters["W2"]
	b2 = parameters["b2"]
	
	dW1 = grads['dW1']
	db1 = grads['db1']
	dW2 = grads['dW2']
	db2 = grads['db2']
	
	parameters["W1"] = W1 - learning_rate * dW1 # perform gradient descent then save new W, b values
	parameters["b1"] = b1 - learning_rate * db1
	parameters["W2"] = W2 - learning_rate * dW2
	parameters["b2"] = b2 - learning_rate * db2

	return parameters

def predict_2LP(X, y, parameters):
	"""
	predict the results of a 2-layer neural network

	Arguments:
	X -- data set of examples you would like to label
	parameters -- parameters of the trained model

	Returns:
	p -- predictions for the given dataset X
	"""

	m = X.shape[1]
	p = np.zeros((1, m))
	caches = []

	A, cache = linear_activation_forward(X, parameters['W1'], parameters['b1'], activation="relu")
	caches.append(cache)
	probas, cache = linear_activation_forward(A, parameters['W2'], parameters['b2'], activation="sigmoid")
	caches.append(cache)

	for i in range(0, probas.shape[1]):
		if probas[0, i] > 0.5:
			p[0, i] = 1
		else:
			p[0, i] = 0

	print("Accuracy: " + str(np.sum((p == y) / m)))

	return p

def print_mislabeled_images(classes, X, y, p):
	"""
	plots images where predictions and truth were different
	X -- dataset
	y -- true labels
	p -- predictions
	"""
	a = p + y
	mislabeled_indices = np.asarray(np.where(a == 1))
	plt.rcParams['figure.figsize'] = (30, 30)
	num_images = len(mislabeled_indices[0])
	for i in range(num_images):
		index = mislabeled_indices[1][i]

		plt.subplot(2, num_images, i + 1)
		plt.imshow(X[:, index].reshape(64, 64, 3), interpolation='nearest')
		plt.axis('off')
		plt.title("Prediction: " + classes[int(p[0, index])].decode("utf-8") + "\n Ground Truth: " + classes[y[0, index]].decode("utf-8"))
	
	plt.show()

def two_layer_model(X, Y, layers_dims, learning_rate = 0.0075, num_iterations = 3000, print_cost=False):
	"""
	Implements a two-layer neural network: LINEAR->RELU->LINEAR->SIGMOID.
	
	Arguments:
	X -- input data, of shape (n_x, number of examples)
	Y -- true "label" vector (containing 1 if cat, 0 if non-cat), of shape (1, number of examples)
	layers_dims -- dimensions of the layers (n_x, n_h, n_y)
	num_iterations -- number of iterations of the optimization loop
	learning_rate -- learning rate of the gradient descent update rule
	print_cost -- If set to True, this will print the cost every 100 iterations 
	
	Returns:
	parameters -- a dictionary containing W1, W2, b1, and b2
	"""
	
	np.random.seed(1)
	grads = {}
	costs = []								# to keep track of the cost
	m = X.shape[1]							 # number of examples
	(n_x, n_h, n_y) = layers_dims
	
	# Initialize parameters dictionary, by calling one of the functions you'd previously implemented
	
	parameters = initialize_parameters(n_x, n_h, n_y) # initialize parameters as needed
	
	# Get W1, b1, W2 and b2 from the dictionary parameters.
	W1 = parameters["W1"]
	b1 = parameters["b1"]
	W2 = parameters["W2"]
	b2 = parameters["b2"]
	
	# Loop (gradient descent)

	for i in range(0, num_iterations):
		
		# Forward propagation: LINEAR -> RELU -> LINEAR -> SIGMOID. Inputs: "X, W1, b1, W2, b2". Output: "A1, cache1, A2, cache2".
		
		A1, cache1 = linear_activation_forward(X, W1, b1, "relu") # feedforward for layers 1 then 2
		A2, cache2 = linear_activation_forward(A1, W2, b2, "sigmoid") 

		# Compute cost
		
		cost = compute_cost(A2, Y)
		
		# Initializing backward propagation
		dA2 = - (np.divide(Y, A2) - np.divide(1 - Y, 1 - A2))
		
		# Backward propagation. Inputs: "dA2, cache2, cache1". Outputs: "dA1, dW2, db2; also dA0 (not used), dW1, db1".
		
		dA1, dW2, db2 = linear_activation_backward(dA2, cache2, "sigmoid") # calculate gradients for layers 2 then 1
		dA0, dW1, db1 = linear_activation_backward(dA1, cache1, "relu")
		
		grads['dW1'] = dW1
		grads['db1'] = db1
		grads['dW2'] = dW2
		grads['db2'] = db2
		
		# Update parameters.
		
		parameters = update_parameters(parameters, grads, learning_rate) # update the parameter dict

		# Retrieve W1, b1, W2, b2 from parameters
		W1 = parameters["W1"]
		b1 = parameters["b1"]
		W2 = parameters["W2"]
		b2 = parameters["b2"]
		
		# Print the cost every 100 training example
		if print_cost and i % 100 == 0:
			print("Cost after iteration {}: {}".format(i, np.squeeze(cost)))
		if print_cost and i % 100 == 0:
			costs.append(cost)
	   
	# Plot the cost

	plt.plot(np.squeeze(costs))
	plt.ylabel('cost')
	plt.xlabel('iterations (per hundreds)')
	plt.title("Learning rate =" + str(learning_rate))
	plt.show()
	
	return parameters

# These are for manipulating and testing data
train_x_orig, train_y, test_x_orig, test_y, classes = load_data()

# Reshape the training and test examples 
train_x_flatten = train_x_orig.reshape(train_x_orig.shape[0], -1).T	  # The "-1" makes reshape flatten the remaining dimensions
test_x_flatten = test_x_orig.reshape(test_x_orig.shape[0], -1).T

# Standardize data to have feature values between 0 and 1
train_x = train_x_flatten/255
test_x = test_x_flatten/255

print ("train_x's shape: " + str(train_x.shape))
print ("test_x's shape: " + str(test_x.shape))

index = 102
plt.imshow(train_x_orig[index])
print ("y = " + str(train_y[0,index]) + ". It's a " + classes[train_y[0,index]].decode("utf-8") +  " picture.")

m_train = train_x_orig.shape[0]
num_px = train_x_orig.shape[1]
m_test = test_x_orig.shape[0]

print ("Number of training examples: " + str(m_train))
print ("Number of testing examples: " + str(m_test))
print ("Each image is of size: (" + str(num_px) + ", " + str(num_px) + ", 3)")
print ("train_x_orig shape: " + str(train_x_orig.shape))
print ("train_y shape: " + str(train_y.shape))
print ("test_x_orig shape: " + str(test_x_orig.shape))
print ("test_y shape: " + str(test_y.shape))

### CONSTANTS DEFINING THE MODEL ####
n_x = 12288		# num_px * num_px * 3
n_h = 7
n_y = 1
layers_dims = (n_x, n_h, n_y)

parameters = two_layer_model(train_x, train_y, layers_dims, num_iterations=2500, print_cost=True)
predict_2LP(train_x, train_y, parameters)
print_mislabeled_images(classes, test_x, test_y, predict_2LP(test_x, test_y, parameters))
